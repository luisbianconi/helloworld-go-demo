name: Push Docker image

on:
  push:
    branches: [ main ]

jobs:
  push_to_registry:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    outputs:
      TAG: ${{ steps.vars.outputs.TAG }}
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Set outputs
        id: vars
        run: |
          echo "image_version=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          echo "image_name=luisbianconi/hello-world-go" >> $GITHUB_ENV
          image_tag=$(git rev-parse --short HEAD)
          echo TAG=$image_tag >> $GITHUB_OUTPUT
          echo luisbianconi/hello-world-go:$image_tag

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: luisbianconi/hello-world-go:${{env.image_version}}
          
  deploy_dev:
      name: Deploys to development environment
      runs-on: ubuntu-latest
      needs: [push_to_registry]
      steps:

        - name: Checkout the other repository
          uses: actions/checkout@v4
          with:
            repository: 'luisbianconi/aulao-pipeline'
            token: ${{ secrets.PAT }}
            path: 'aulao-pipeline'
            
        - name: Update image tag in dev values
          env:
            IMAGE_TAG: ${{ needs.push_to_registry.outputs.TAG }}
          run: |
            sed -i "/^ *image:/s|.*|  image: luisbianconi/hello-world-go:$IMAGE_TAG|" ./aulao-pipeline/dev/helloworld-docker/helm/values.yaml

        - name: Create dev branch and push changes
          env:
            IMAGE_TAG: ${{ needs.push_to_registry.outputs.TAG }}
          run: |
            cd aulao-pipeline
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"

            BRANCH_NAME="dev-latest"
            
            # Check if branch already exists
            if git ls-remote --heads origin "$BRANCH_NAME" | grep -q "$BRANCH_NAME"; then
              # Switch to existing branch and reset to main
              git fetch origin "$BRANCH_NAME"
              git checkout "$BRANCH_NAME"
              git reset --hard origin/main
            else
              # Create new branch from main
              git checkout -b "$BRANCH_NAME"
            fi
            
            git add .
            git commit -m "feat: deploy $IMAGE_TAG to development environment"
            git push origin "$BRANCH_NAME" --force 
